import { createTransport, type Transporter } from 'nodemailer';
import type { Alert, DigestRun } from '@prisma/client';

export interface EmailConfig {
  host: string;
  port: number;
  secure: boolean;
  auth: {
    user: string;
    pass: string;
  };
  from: string;
  to: string | string[];
}

export interface EmailDeliveryResult {
  success: boolean;
  messageId?: string;
  error?: string;
}

/**
 * Format an alert for email HTML
 */
function formatAlertForEmail(alert: Alert): string {
  const severityColor = {
    critical: '#ef4444',
    warning: '#f59e0b',
    info: '#3b82f6',
  }[alert.severity] ?? '#6b7280';

  const severityLabel = alert.severity.toUpperCase();

  return `
    <div style="border: 1px solid #e5e7eb; border-radius: 8px; padding: 16px; margin-bottom: 16px;">
      <div style="display: flex; align-items: center; margin-bottom: 8px;">
        <span style="background-color: ${severityColor}; color: white; padding: 4px 8px; border-radius: 4px; font-size: 12px; font-weight: bold; margin-right: 8px;">
          ${severityLabel}
        </span>
        <h3 style="margin: 0; color: #111827;">${escapeHtml(alert.title)}</h3>
      </div>
      ${alert.description ? `<p style="color: #6b7280; margin: 8px 0;">${escapeHtml(alert.description)}</p>` : ''}
      <div style="font-size: 14px; color: #9ca3af; margin-top: 12px;">
        <div>Type: ${alert.type.replace(/_/g, ' ')}</div>
        <div>Triggered: ${new Date(alert.triggerAt).toLocaleString()}</div>
      </div>
    </div>
  `;
}

/**
 * Format a digest for email HTML
 */
function formatDigestForEmail(digest: DigestRun): string {
  const portfolioTotal = digest.portfolioTotal ?? '0';

  return `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>WeDefiDaily Digest</title>
    </head>
    <body style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif; line-height: 1.6; color: #111827; max-width: 600px; margin: 0 auto; padding: 20px;">
      <header style="border-bottom: 2px solid #e5e7eb; padding-bottom: 20px; margin-bottom: 24px;">
        <h1 style="color: #111827; margin: 0;">üìä WeDefiDaily Digest</h1>
        <p style="color: #6b7280; margin: 8px 0 0 0;">${new Date(digest.generatedAt).toLocaleString()}</p>
      </header>

      <section style="background-color: #f9fafb; border-radius: 8px; padding: 16px; margin-bottom: 24px;">
        <h2 style="color: #111827; margin: 0 0 12px 0; font-size: 18px;">Executive Summary</h2>
        <table style="width: 100%;">
          <tr>
            <td style="padding: 4px 0; color: #6b7280;">Portfolio Value:</td>
            <td style="padding: 4px 0; text-align: right; font-weight: bold;">$${String(portfolioTotal)}</td>
          </tr>
          <tr>
            <td style="padding: 4px 0; color: #6b7280;">Wallets Tracked:</td>
            <td style="padding: 4px 0; text-align: right; font-weight: bold;">${digest.walletsTracked}</td>
          </tr>
          <tr>
            <td style="padding: 4px 0; color: #6b7280;">Actionable Rewards:</td>
            <td style="padding: 4px 0; text-align: right; font-weight: bold;">${digest.actionableRewards}</td>
          </tr>
          <tr>
            <td style="padding: 4px 0; color: #6b7280;">Critical Alerts:</td>
            <td style="padding: 4px 0; text-align: right; font-weight: bold; color: #ef4444;">${digest.criticalAlerts}</td>
          </tr>
          <tr>
            <td style="padding: 4px 0; color: #6b7280;">Warning Alerts:</td>
            <td style="padding: 4px 0; text-align: right; font-weight: bold; color: #f59e0b;">${digest.warningAlerts}</td>
          </tr>
        </table>
      </section>

      ${digest.summary ? `
      <section style="margin-bottom: 24px;">
        <h2 style="color: #111827; margin: 0 0 12px 0; font-size: 18px;">Key Points</h2>
        <p style="color: #6b7280; margin: 0;">${escapeHtml(digest.summary)}</p>
      </section>
      ` : ''}

      <footer style="border-top: 1px solid #e5e7eb; padding-top: 16px; margin-top: 32px; font-size: 14px; color: #9ca3af;">
        <p style="margin: 0;">Generated by WeDefiDaily</p>
        <p style="margin: 4px 0 0 0;">
          <a href="https://github.com/cjnemes/WeDefiDaily" style="color: #3b82f6; text-decoration: none;">View on GitHub</a>
        </p>
      </footer>
    </body>
    </html>
  `;
}

/**
 * Escape HTML special characters
 */
function escapeHtml(text: string): string {
  const map: Record<string, string> = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
  };
  return text.replace(/[&<>"']/g, (m) => map[m] ?? m);
}

/**
 * Create email transporter
 */
function createEmailTransporter(config: EmailConfig): Transporter {
  return createTransport({
    host: config.host,
    port: config.port,
    secure: config.secure,
    auth: config.auth,
  });
}

/**
 * Send an email
 */
async function sendEmail(
  transporter: Transporter,
  config: EmailConfig,
  subject: string,
  html: string,
): Promise<EmailDeliveryResult> {
  try {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    const info = await transporter.sendMail({
      from: config.from,
      to: Array.isArray(config.to) ? config.to.join(', ') : config.to,
      subject,
      html,
    });

    return {
      success: true,
      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
      messageId: info.messageId as string,
    };
  } catch (error) {
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
    };
  }
}

/**
 * Deliver an alert via email
 */
export async function deliverAlertToEmail(
  alert: Alert,
  config: EmailConfig,
): Promise<EmailDeliveryResult> {
  const transporter = createEmailTransporter(config);
  const severityEmoji = {
    critical: 'üî¥',
    warning: '‚ö†Ô∏è',
    info: '‚ÑπÔ∏è',
  }[alert.severity] ?? 'üì¢';

  const subject = `${severityEmoji} [${alert.severity.toUpperCase()}] ${alert.title}`;
  const html = `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <title>Alert: ${escapeHtml(alert.title)}</title>
    </head>
    <body style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
      ${formatAlertForEmail(alert)}
    </body>
    </html>
  `;

  return sendEmail(transporter, config, subject, html);
}

/**
 * Deliver a digest via email
 */
export async function deliverDigestToEmail(
  digest: DigestRun,
  config: EmailConfig,
): Promise<EmailDeliveryResult> {
  const transporter = createEmailTransporter(config);
  const subject = `üìä WeDefiDaily Digest - ${new Date(digest.generatedAt).toLocaleDateString()}`;
  const html = formatDigestForEmail(digest);

  return sendEmail(transporter, config, subject, html);
}

/**
 * Validate email configuration
 */
export function validateEmailConfig(config: Partial<EmailConfig>): string[] {
  const errors: string[] = [];

  if (!config.host) {
    errors.push('SMTP host is required');
  }

  if (!config.port) {
    errors.push('SMTP port is required');
  }

  if (!config.auth?.user) {
    errors.push('SMTP auth user is required');
  }

  if (!config.auth?.pass) {
    errors.push('SMTP auth password is required');
  }

  if (!config.from) {
    errors.push('From address is required');
  } else if (!config.from.match(/^.+@.+\..+$/)) {
    errors.push('Invalid from address format');
  }

  if (!config.to) {
    errors.push('To address is required');
  } else {
    const addresses = Array.isArray(config.to) ? config.to : [config.to];
    addresses.forEach((addr, i) => {
      if (!addr.match(/^.+@.+\..+$/)) {
        errors.push(`Invalid to address format at index ${i}`);
      }
    });
  }

  return errors;
}