generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Chain {
  id                    Int       @id
  name                  String
  shortName             String?
  nativeCurrencySymbol  String?
  explorerUrl           String?
  metadata              Json?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  wallets               Wallet[]
  protocols             Protocol[]
  tokens                Token[]
  gauges                Gauge[]
}

model Wallet {
  id        String   @id @default(uuid())
  address   String   @db.VarChar(42)
  chainId   Int
  label     String?
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chain     Chain    @relation(fields: [chainId], references: [id], onDelete: Cascade)
  balances  TokenBalance[]
  governanceLocks GovernanceLock[]
  rewardOpportunities RewardOpportunity[]
  rewardClaims        RewardClaim[]
  gammaswapPositions  GammaswapPosition[]
  alerts              Alert[]
  priceThresholds     PriceThreshold[]
  transactions        Transaction[]
  portfolioSnapshots  PortfolioSnapshot[]
  positionSnapshots   PositionSnapshot[]
  performanceMetrics  PerformanceMetric[]

  @@unique([address, chainId], map: "wallet_address_chain_unique")
}

model Protocol {
  id        String   @id @default(uuid())
  slug      String   @unique @db.VarChar(64)
  name      String
  chainId   Int
  website   String?
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chain     Chain    @relation(fields: [chainId], references: [id], onDelete: Cascade)
  governanceLocks GovernanceLock[]
  voteEpochs     VoteEpoch[]
  gauges         Gauge[]
  rewardOpportunities RewardOpportunity[]
  rewardClaims        RewardClaim[]
  gammaswapPositions  GammaswapPosition[]
  gammaswapPools      GammaswapPool[]
  alerts              Alert[]
  transactions        Transaction[]
  positionSnapshots   PositionSnapshot[]
}

model Token {
  id        String   @id @default(uuid())
  chainId   Int
  address   String   @db.VarChar(64)
  symbol    String   @db.VarChar(32)
  name      String
  decimals  Int
  isNative  Boolean  @default(false)
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chain            Chain           @relation(fields: [chainId], references: [id], onDelete: Cascade)
  balances         TokenBalance[]
  priceSnapshots   PriceSnapshot[]
  bribeRewards     Bribe[]  @relation("BribeRewardToken")
  rewardOpportunities RewardOpportunity[]
  rewardClaims        RewardClaim[]
  gammaswapPositions  GammaswapPosition[] @relation("GammaswapPositionAsset")
  gammaswapPoolsAsBase  GammaswapPool[] @relation("GammaswapPoolBaseToken")
  gammaswapPoolsAsQuote GammaswapPool[] @relation("GammaswapPoolQuoteToken")
  alerts              Alert[]
  priceThresholds     PriceThreshold[] @relation("PriceThresholdToken")
  transactions        Transaction[]
  positionSnapshots   PositionSnapshot[]

  @@unique([chainId, address], map: "token_chain_address_unique")
}

model TokenBalance {
  id             String   @id @default(uuid())
  walletId       String
  tokenId        String
  rawBalance     String
  quantity       Decimal  @default(0)
  usdValue       Decimal? @db.Decimal(36, 18)
  blockNumber    BigInt?
  fetchedAt      DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  wallet         Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  token          Token    @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@unique([walletId, tokenId], map: "token_balance_wallet_token_unique")
  @@index([tokenId])
  @@index([walletId])
}

model PriceSnapshot {
  id          String   @id @default(uuid())
  tokenId     String
  priceUsd    Decimal  @db.Decimal(36, 18)
  source      String   @db.VarChar(32)
  recordedAt  DateTime @default(now())
  createdAt   DateTime @default(now())

  token       Token    @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@index([tokenId, recordedAt], map: "price_snapshot_token_recorded_idx")
}

model DigestRun {
  id                String   @id @default(uuid())
  generatedAt       DateTime @default(now())
  markdownPath      String?
  htmlPath          String?
  jsonPath          String?
  portfolioTotal    Decimal? @db.Decimal(36, 18)
  walletsTracked    Int
  actionableRewards Int
  criticalAlerts    Int
  warningAlerts     Int
  summary           String
  metadata          Json?
  createdAt         DateTime @default(now())
}

model GovernanceLock {
  id               String   @id @default(uuid())
  protocolId       String
  walletId         String
  lockAmount       Decimal  @db.Decimal(36, 18)
  votingPower      Decimal  @db.Decimal(36, 18)
  boostMultiplier  Decimal? @db.Decimal(36, 18)
  lockEndsAt       DateTime?
  lastRefreshedAt  DateTime @default(now())
  metadata         Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  protocol         Protocol @relation(fields: [protocolId], references: [id], onDelete: Cascade)
  wallet           Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  voteSnapshots    VotePowerSnapshot[]
  rewardOpportunities RewardOpportunity[]
  rewardClaims        RewardClaim[]

  @@unique([protocolId, walletId], map: "governance_lock_protocol_wallet_unique")
  @@index([walletId])
  @@index([protocolId])
}

model VoteEpoch {
  id          String   @id @default(uuid())
  protocolId  String
  epochNumber Int?
  startsAt    DateTime
  endsAt      DateTime
  snapshotAt  DateTime?
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  protocol    Protocol   @relation(fields: [protocolId], references: [id], onDelete: Cascade)
  bribes      Bribe[]
  votePower   VotePowerSnapshot[]

  @@index([protocolId, startsAt])
  @@unique([protocolId, startsAt], map: "vote_epoch_protocol_start_unique")
}

model Gauge {
  id         String   @id @default(uuid())
  protocolId String
  chainId    Int
  address    String   @db.VarChar(64)
  name       String?
  metadata   Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  protocol   Protocol @relation(fields: [protocolId], references: [id], onDelete: Cascade)
  chain      Chain    @relation(fields: [chainId], references: [id], onDelete: Cascade)
  bribes     Bribe[]

  @@unique([protocolId, address], map: "gauge_protocol_address_unique")
  @@index([chainId])
}

model Bribe {
  id             String   @id @default(uuid())
  gaugeId        String
  epochId        String
  rewardTokenId  String
  rewardAmount   Decimal  @db.Decimal(36, 18)
  rewardValueUsd Decimal? @db.Decimal(36, 18)
  totalVotes     Decimal? @db.Decimal(36, 18)
  roiPercentage  Decimal? @db.Decimal(36, 18)
  sponsorAddress String?  @db.VarChar(64)
  source         String?  @db.VarChar(64)
  metadata       Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  gauge          Gauge    @relation(fields: [gaugeId], references: [id], onDelete: Cascade)
  epoch          VoteEpoch @relation(fields: [epochId], references: [id], onDelete: Cascade)
  rewardToken    Token    @relation("BribeRewardToken", fields: [rewardTokenId], references: [id], onDelete: Cascade)

  @@unique([gaugeId, epochId, rewardTokenId], map: "bribe_unique_reward")
  @@index([epochId])
}

model VotePowerSnapshot {
  id               String   @id @default(uuid())
  governanceLockId String
  epochId          String?
  votingPower      Decimal  @db.Decimal(36, 18)
  capturedAt       DateTime @default(now())
  metadata         Json?
  createdAt        DateTime @default(now())

  governanceLock   GovernanceLock @relation(fields: [governanceLockId], references: [id], onDelete: Cascade)
  epoch            VoteEpoch?      @relation(fields: [epochId], references: [id], onDelete: Cascade)

  @@index([governanceLockId, capturedAt])
  @@index([epochId])
}

model RewardOpportunity {
  id             String   @id @default(uuid())
  protocolId     String
  walletId       String
  governanceLockId String?
  tokenId        String
  contextLabel   String?  @db.VarChar(128)
  contextAddress String?  @db.VarChar(64)
  amount         Decimal  @db.Decimal(36, 18)
  usdValue       Decimal? @db.Decimal(36, 18)
  apr            Decimal? @db.Decimal(36, 18)
  gasEstimateUsd Decimal? @db.Decimal(36, 18)
  claimDeadline  DateTime?
  source         String?  @db.VarChar(64)
  metadata       Json?
  computedAt     DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  protocol       Protocol       @relation(fields: [protocolId], references: [id], onDelete: Cascade)
  wallet         Wallet         @relation(fields: [walletId], references: [id], onDelete: Cascade)
  governanceLock GovernanceLock? @relation(fields: [governanceLockId], references: [id], onDelete: Cascade)
  token          Token          @relation(fields: [tokenId], references: [id], onDelete: Cascade)
  claims         RewardClaim[]
  alerts         Alert[]

  @@unique([protocolId, walletId, tokenId, source], map: "reward_opportunity_unique")
  @@index([walletId])
  @@index([claimDeadline])
  @@index([protocolId, computedAt])
}

model RewardClaim {
  id                 String   @id @default(uuid())
  rewardOpportunityId String
  protocolId         String
  walletId           String
  tokenId            String
  governanceLockId   String?
  amount             Decimal  @db.Decimal(36, 18)
  usdValue           Decimal? @db.Decimal(36, 18)
  gasSpentUsd        Decimal? @db.Decimal(36, 18)
  transactionHash    String?  @db.VarChar(72)
  claimedAt          DateTime @default(now())
  metadata           Json?

  rewardOpportunity  RewardOpportunity @relation(fields: [rewardOpportunityId], references: [id], onDelete: Cascade)
  protocol           Protocol          @relation(fields: [protocolId], references: [id], onDelete: Cascade)
  wallet             Wallet            @relation(fields: [walletId], references: [id], onDelete: Cascade)
  token              Token             @relation(fields: [tokenId], references: [id], onDelete: Cascade)
  governanceLock     GovernanceLock?   @relation(fields: [governanceLockId], references: [id], onDelete: Cascade)

  @@index([walletId, claimedAt])
  @@index([protocolId, claimedAt])
}

model GammaswapPool {
  id             String   @id @default(uuid())
  protocolId     String
  poolAddress    String   @db.VarChar(64)
  baseTokenId    String
  quoteTokenId   String
  baseSymbol     String   @db.VarChar(32)
  quoteSymbol    String   @db.VarChar(32)
  tvlUsd         Decimal? @db.Decimal(36, 18)
  utilization    Decimal? @db.Decimal(36, 18)
  borrowRateApr  Decimal? @db.Decimal(36, 18)
  supplyRateApr  Decimal? @db.Decimal(36, 18)
  metadata       Json?
  updatedAt      DateTime @updatedAt
  createdAt      DateTime @default(now())

  protocol       Protocol @relation(fields: [protocolId], references: [id], onDelete: Cascade)
  baseToken      Token    @relation("GammaswapPoolBaseToken", fields: [baseTokenId], references: [id], onDelete: Cascade)
  quoteToken     Token    @relation("GammaswapPoolQuoteToken", fields: [quoteTokenId], references: [id], onDelete: Cascade)
  positions      GammaswapPosition[]

  @@unique([protocolId, poolAddress], map: "gammaswap_pool_unique")
}

model GammaswapPosition {
  id              String   @id @default(uuid())
  protocolId      String
  poolId          String
  walletId        String
  assetTokenId    String
  positionType    String   @db.VarChar(32)
  notional        Decimal  @db.Decimal(36, 18)
  debtValue       Decimal? @db.Decimal(36, 18)
  healthRatio     Decimal? @db.Decimal(36, 18)
  liquidationPrice Decimal? @db.Decimal(36, 18)
  pnlUsd          Decimal? @db.Decimal(36, 18)
  lastSyncAt      DateTime @default(now())
  metadata        Json?

  protocol        Protocol @relation(fields: [protocolId], references: [id], onDelete: Cascade)
  pool            GammaswapPool @relation(fields: [poolId], references: [id], onDelete: Cascade)
  wallet          Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  assetToken      Token    @relation("GammaswapPositionAsset", fields: [assetTokenId], references: [id], onDelete: Cascade)
  alerts          Alert[]

  @@index([walletId])
  @@index([protocolId, lastSyncAt])
  @@index([healthRatio])
  @@unique([protocolId, poolId, walletId, positionType], map: "gammaswap_position_unique")
}

model Alert {
  id                  String   @id @default(uuid())
  type                String   @db.VarChar(64)
  severity            String   @db.VarChar(16)
  title               String
  description         String?
  status              String   @db.VarChar(16) @default("pending")
  triggerAt           DateTime @default(now())
  expiresAt           DateTime?
  metadata            Json?
  contextHash         String   @unique
  walletId            String?
  protocolId          String?
  tokenId             String?
  rewardOpportunityId String?
  gammaswapPositionId String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  wallet            Wallet?            @relation(fields: [walletId], references: [id], onDelete: SetNull)
  protocol          Protocol?          @relation(fields: [protocolId], references: [id], onDelete: SetNull)
  token             Token?             @relation(fields: [tokenId], references: [id], onDelete: SetNull)
  rewardOpportunity RewardOpportunity? @relation(fields: [rewardOpportunityId], references: [id], onDelete: SetNull)
  gammaswapPosition GammaswapPosition? @relation(fields: [gammaswapPositionId], references: [id], onDelete: SetNull)
  deliveries        AlertDelivery[]

  @@index([status])
  @@index([triggerAt])
  @@index([walletId])
  @@index([protocolId])
}

model AlertDelivery {
  id        String   @id @default(uuid())
  alertId   String
  channel   String   @db.VarChar(32)
  success   Boolean  @default(false)
  metadata  Json?
  createdAt DateTime @default(now())

  alert Alert @relation(fields: [alertId], references: [id], onDelete: Cascade)

  @@index([alertId])
  @@index([channel])
}

model PriceThreshold {
  id              String   @id @default(uuid())
  walletId        String?
  tokenId         String
  thresholdType   String   @db.VarChar(16) // "above" or "below"
  thresholdPrice  Decimal  @db.Decimal(36, 18)
  isEnabled       Boolean  @default(true)
  lastTriggeredAt DateTime?
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  wallet          Wallet?  @relation(fields: [walletId], references: [id], onDelete: Cascade)
  token           Token    @relation("PriceThresholdToken", fields: [tokenId], references: [id], onDelete: Cascade)

  @@unique([walletId, tokenId, thresholdType, thresholdPrice], map: "price_threshold_unique")
  @@index([tokenId])
  @@index([isEnabled])
}

model Transaction {
  id              String   @id @default(uuid())
  walletId        String
  tokenId         String
  transactionHash String   @db.VarChar(72)
  blockNumber     BigInt
  transactionType String   @db.VarChar(32) // "buy", "sell", "claim", "transfer", "stake", "unstake"
  amount          Decimal  @db.Decimal(36, 18)
  priceUsd        Decimal? @db.Decimal(36, 18)
  gasSpentUsd     Decimal? @db.Decimal(36, 18)
  protocolId      String?
  fromAddress     String?  @db.VarChar(42)
  toAddress       String?  @db.VarChar(42)
  metadata        Json?
  occurredAt      DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  wallet          Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  token           Token    @relation(fields: [tokenId], references: [id], onDelete: Cascade)
  protocol        Protocol? @relation(fields: [protocolId], references: [id], onDelete: SetNull)

  @@unique([walletId, transactionHash, tokenId], map: "transaction_wallet_hash_token_unique")
  @@index([walletId, occurredAt])
  @@index([tokenId])
  @@index([transactionType])
  @@index([blockNumber])
}

model PortfolioSnapshot {
  id                    String   @id @default(uuid())
  walletId              String?  // null = all wallets combined snapshot
  totalUsdValue         Decimal  @db.Decimal(36, 18)
  totalUsdValueChange24h Decimal? @db.Decimal(36, 18)
  totalUsdValueChange7d  Decimal? @db.Decimal(36, 18)
  totalUsdValueChange30d Decimal? @db.Decimal(36, 18)
  tokensTracked         Int
  averageApr            Decimal? @db.Decimal(36, 18)
  metadata              Json? // position breakdowns, asset allocations
  capturedAt            DateTime @default(now())
  createdAt             DateTime @default(now())

  wallet                Wallet?  @relation(fields: [walletId], references: [id], onDelete: Cascade)
  positionSnapshots     PositionSnapshot[]

  @@index([walletId, capturedAt])
  @@index([capturedAt])
}

model PositionSnapshot {
  id                  String   @id @default(uuid())
  portfolioSnapshotId String
  tokenId             String
  walletId            String
  quantity            Decimal  @db.Decimal(36, 18)
  usdValue            Decimal  @db.Decimal(36, 18)
  priceUsd            Decimal  @db.Decimal(36, 18)
  costBasisUsd        Decimal? @db.Decimal(36, 18) // average cost per token
  unrealizedPnlUsd    Decimal? @db.Decimal(36, 18)
  unrealizedPnlPercent Decimal? @db.Decimal(36, 18)
  positionType        String   @db.VarChar(32) // "liquid", "locked", "staked", "lp"
  protocolId          String?
  metadata            Json?

  portfolioSnapshot   PortfolioSnapshot @relation(fields: [portfolioSnapshotId], references: [id], onDelete: Cascade)
  token               Token             @relation(fields: [tokenId], references: [id], onDelete: Cascade)
  wallet              Wallet            @relation(fields: [walletId], references: [id], onDelete: Cascade)
  protocol            Protocol?         @relation(fields: [protocolId], references: [id], onDelete: SetNull)

  @@index([portfolioSnapshotId])
  @@index([tokenId])
  @@index([walletId])
}

model PerformanceMetric {
  id                String   @id @default(uuid())
  walletId          String?  // null = all wallets combined
  timeframe         String   @db.VarChar(16) // "24h", "7d", "30d", "90d", "1y", "all"
  totalReturn       Decimal? @db.Decimal(36, 18)
  totalReturnPercent Decimal? @db.Decimal(36, 18)
  realizedPnl       Decimal? @db.Decimal(36, 18)
  unrealizedPnl     Decimal? @db.Decimal(36, 18)
  sharpeRatio       Decimal? @db.Decimal(36, 18)
  maxDrawdown       Decimal? @db.Decimal(36, 18)
  volatility        Decimal? @db.Decimal(36, 18)
  winRate           Decimal? @db.Decimal(36, 18)
  tradesCount       Int      @default(0)
  computedAt        DateTime @default(now())
  metadata          Json?

  wallet            Wallet?  @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@unique([walletId, timeframe], map: "performance_metric_wallet_timeframe_unique")
  @@index([walletId, computedAt])
  @@index([timeframe])
}
