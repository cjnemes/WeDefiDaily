generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Chain {
  id                    Int       @id
  name                  String
  shortName             String?
  nativeCurrencySymbol  String?
  explorerUrl           String?
  metadata              Json?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  wallets               Wallet[]
  protocols             Protocol[]
  tokens                Token[]
}

model Wallet {
  id        String   @id @default(uuid())
  address   String   @db.VarChar(42)
  chainId   Int
  label     String?
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chain     Chain    @relation(fields: [chainId], references: [id], onDelete: Cascade)
  balances  TokenBalance[]

  @@unique([address, chainId], map: "wallet_address_chain_unique")
}

model Protocol {
  id        String   @id @default(uuid())
  slug      String   @unique @db.VarChar(64)
  name      String
  chainId   Int
  website   String?
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chain     Chain    @relation(fields: [chainId], references: [id], onDelete: Cascade)
}

model Token {
  id        String   @id @default(uuid())
  chainId   Int
  address   String   @db.VarChar(64)
  symbol    String   @db.VarChar(32)
  name      String
  decimals  Int
  isNative  Boolean  @default(false)
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chain            Chain           @relation(fields: [chainId], references: [id], onDelete: Cascade)
  balances         TokenBalance[]
  priceSnapshots   PriceSnapshot[]

  @@unique([chainId, address], map: "token_chain_address_unique")
}

model TokenBalance {
  id             String   @id @default(uuid())
  walletId       String
  tokenId        String
  rawBalance     String
  quantity       Decimal  @default(0)
  usdValue       Decimal? @db.Decimal(36, 18)
  blockNumber    BigInt?
  fetchedAt      DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  wallet         Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  token          Token    @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@unique([walletId, tokenId], map: "token_balance_wallet_token_unique")
  @@index([tokenId])
  @@index([walletId])
}

model PriceSnapshot {
  id          String   @id @default(uuid())
  tokenId     String
  priceUsd    Decimal  @db.Decimal(36, 18)
  source      String   @db.VarChar(32)
  recordedAt  DateTime @default(now())
  createdAt   DateTime @default(now())

  token       Token    @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@index([tokenId, recordedAt], map: "price_snapshot_token_recorded_idx")
}
